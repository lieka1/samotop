image: "rust:latest"

stages:
  - build
  - release

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"

build:
  stage: build
  only:
    - branches
  cache:
    paths: &cache-paths
      - target/
      - $CARGO_HOME
  artifacts:
    paths:
      - target/debug/samotop-server
      - target/release/samotop-server
      - Cargo.lock
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - cargo build --color always
    - cargo test --all --color always
    - case "$CI_COMMIT_REF_NAME" in master|develop) echo will also build/test release ;; *) exit 0 ;; esac
    - cargo build --release --color always
    - cargo test --all --release --color always

test-stable:
  stage: build
  only:
    - branches
  cache:
    paths: *cache-paths
    policy: pull
  before_script:
    - rustup component add clippy rustfmt
    - cargo install cargo-readme
  script:
    - cargo test --workspace --all-features --color always
    - cargo clippy --workspace --all-features --color always -- -Dclippy::all
    - cargo check --workspace --benches --color always
    - ./fix.sh

test-nightly:
  stage: build
  allow_failure: true
  only:
    - branches
  cache:
    key: nightly
    paths: *cache-paths
  before_script:
    - rustup default nightly
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - RUST_BACKTRACE=1 cargo test --workspace --examples --bins --tests --all-features --color always

test-examples:
  stage: build
  only:
    - branches
  cache:
    paths: *cache-paths
    policy: pull
  script:
    - RUST_LOG=trace cargo run --example default &
    - |
      curl -v --url 'smtp://localhost:2525' --mail-from from@spf.org --mail-rcpt to@mikesh.info --upload-file - << EOF
      From: Moohoo <moo@hoo.com>
      To: Yeeehaw <ye@haw.com>
      Subject: Try me

      xoxo
      EOF 2>&1 > client.log
    - kill $(jobs -p)
    - cat client.log

publish-crate:
  variables:
    COMPVER: $CI_COMMIT_TAG
  stage: release
  only:
    - tags
  cache:
    paths: *cache-paths
    policy: pull
  artifacts:
    paths:
      - Cargo.lock
  script:
    - COMPONENT="$(dirname "$COMPVER")"
    - VERSION="${COMPVER##$COMPONENT/}"
    - echo "Releasing component ${COMPONENT:?cannot be empty} v ${VERSION:?cannot be empty}"
    - cargo test --manifest-path "$COMPONENT/Cargo.toml" --release --color always
    - test "$VERSION" == "$(cargo pkgid --manifest-path "$COMPONENT/Cargo.toml" | cut -d '#' -f2- | tr -d '\n')"
    - cargo publish --manifest-path "$COMPONENT/Cargo.toml" --token "$CRATES_KEY" --color always

publish-docker:
  stage: release
  image: "docker:git"
  services:
    - docker:dind
  only:
    changes:
      - samotop-server/**/*
    refs:
      - develop
      - master
  script:
    - cp -ra samotop-server/docker target/
    # Copy either debug or release binary
    - cp target/release/samotop-server target/docker/samotop
    - cd target/docker/
    - docker build -t samotop .
    - cd ../../
    - docker run -t --rm samotop --help
    # extract version
    - VER="$(docker run -t --rm samotop --version | cut -d ' ' -f2- | tr -d '\r\n')"
    - echo "version=$VER"
    # local tagging
    - TAG_CURRENT="brightopen/samotop:$VER"
    - TAG_MINOR="brightopen/samotop:${VER%.*}"
    - TAG_MAJOR="brightopen/samotop:${VER%%.*}"
    - TAG_LATEST="brightopen/samotop:latest"
    - |
      echo "Tags
        current: $TAG_CURRENT (willbe published only on develop or master)
        minor: $TAG_MINOR (willbe published only on master)
        major: $TAG_MAJOR (willbe published only on master)
        latest: $TAG_LATEST (willbe published only on master)
      "
    - docker tag samotop "$TAG_CURRENT"
    - docker tag samotop "$TAG_MINOR"
    - docker tag samotop "$TAG_MAJOR"
    - docker tag samotop "$TAG_LATEST"
    # remote docker hub push
    - docker login -u "$DOCKER_USR" -p "$DOCKER_PWD"
    # push current version
    - case "$CI_COMMIT_REF_NAME" in master|develop) docker push "$TAG_CURRENT" ;; *) echo Will only push current from master or develop branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
    # push stable version as latest
    - case "$CI_COMMIT_REF_NAME" in master) docker push "$TAG_MINOR" && docker push "$TAG_MAJOR" && docker push "$TAG_LATEST" ;; *) echo Will only push latest from master branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
