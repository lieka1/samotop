image: "rust:latest"

stages:
  - build
  - release

variables:
  CARGO_HOME: ".cargo"
  GIT_SUBMODULE_STRATEGY: recursive

build:
  stage: build
  only:
    - branches
  cache:
    paths: &cache-paths
      - target/
      - $CARGO_HOME
  artifacts:
    paths:
      - target/samotop
      - Cargo.lock
  before_script:
    - rustc --version
    - cargo --version
  script:
    # if it is a stable version, do a release build, otherwise debug build
    - case "$CI_COMMIT_REF_NAME" in master) cargo build --release ;; *) cargo build ;; esac
    # test in release mode for stable builds otherwise in debug
    # develop is build in debug, but tested in release mode to cover both sides
    - case "$CI_COMMIT_REF_NAME" in develop|master) cargo test --all --release ;; *) cargo test --all ;; esac
    # copy either release or debug server as an artifact
    - case "$CI_COMMIT_REF_NAME" in master) cp -fa target/release/samotop-server target/samotop ;; *) cp -fa target/debug/samotop-server target/samotop ;; esac

test-nightly:
  stage: build
  allow_failure: true
  only:
    - branches
  cache:
    key: nightly
    paths: *cache-paths
  script:
    - rustup default nightly
    - cargo test --all --verbose

publish-crate:
  variables:
    COMPVER: $CI_COMMIT_TAG
  stage: release
  only:
    - tags
  cache:
    paths: *cache-paths
  script:
    - COMPONENT="$(dirname "$COMPVER")"
    - VERSION="${COMPVER##$COMPONENT/}"
    - echo "Releasing component ${COMPONENT:?cannot be empty} v ${VERSION:?cannot be empty}"
    - test "$VERSION" == "$(cargo pkgid --manifest-path "$COMPONENT/Cargo.toml" | cut -d '#' -f2- | tr -d '\n')"
    - cargo test --manifest-path "$COMPONENT/Cargo.toml" --release
    - cargo publish --manifest-path "$COMPONENT/Cargo.toml" --token "$CRATES_KEY"

publish-docker:
  stage: release
  image: "docker:git"
  services:
    - docker:dind
  only:
    changes:
      - samotop-server/**/*
    refs:
      - develop
      - master
  script:
    - cp -ra samotop-server/docker target/
    # Copy either debug or release binary
    - cp target/samotop target/docker/samotop
    - cd target/docker/
    - docker build -t samotop .
    - cd ../../
    - docker run -t --rm samotop --help
    # extract version
    - VER="$(docker run -t --rm samotop --version | cut -d ' ' -f2- | tr -d '\r\n')"
    - echo "version=$VER"
    # local tagging
    - TAG_CURRENT="brightopen/samotop:$VER"
    - TAG_MINOR="brightopen/samotop:${VER%.*}"
    - TAG_MAJOR="brightopen/samotop:${VER%%.*}"
    - TAG_LATEST="brightopen/samotop:latest"
    - |
      echo "Tags
        current: $TAG_CURRENT (willbe published only on develop or master)
        minor: $TAG_MINOR (willbe published only on master)
        major: $TAG_MAJOR (willbe published only on master)
        latest: $TAG_LATEST (willbe published only on master)
      "
    - docker tag samotop "$TAG_CURRENT"
    - docker tag samotop "$TAG_MINOR"
    - docker tag samotop "$TAG_MAJOR"
    - docker tag samotop "$TAG_LATEST"
    # remote docker hub push
    - docker login -u "$DOCKER_USR" -p "$DOCKER_PWD"
    # push current version
    - case "$CI_COMMIT_REF_NAME" in master|develop) docker push "$TAG_CURRENT" ;; *) echo Will only push current from master or develop branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
    # push stable version as latest
    - case "$CI_COMMIT_REF_NAME" in master) docker push "$TAG_MINOR" && docker push "$TAG_MAJOR" && docker push "$TAG_LATEST" ;; *) echo Will only push latest from master branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
