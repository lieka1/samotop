image: "rust:latest"

stages:
  - build
  - release

variables:
  CARGO_HOME: ".cargo"

build:
  stage: build
  except:
    - master
  cache:
    paths: &cache-paths
      - target/
      - $CARGO_HOME
  artifacts:
    paths:
      - target/samotop
      - Cargo.lock
  before_script:
    - rustc --version
    - cargo --version
  script:
    # if it is a stable version, do a release build, otherwise debug build
    - test "$CI_COMMIT_REF_NAME" == "master" || cargo build
    - test "$CI_COMMIT_REF_NAME" != "master" || cargo build --release
    # test in release mode for stable builds otherwise in debug
    - test "$CI_COMMIT_REF_NAME" == "master" || cargo test --all
    - test "$CI_COMMIT_REF_NAME" != "master" || cargo test --all --release
    # copy either release or debug server as an artifact
    - test "$CI_COMMIT_REF_NAME" == "master" || cp -fa target/debug/samotop-server target/samotop
    - test "$CI_COMMIT_REF_NAME" != "master" || cp -fa target/release/samotop-server target/samotop

test-nightly:
  stage: release
  allow_failure: true
  cache:
    key: nightly
    paths: *cache-paths
  script:
    - rustup default nightly
    - cargo test --all --verbose

publish-crates:
  stage: release
  cache:
    policy: pull
    paths: *cache-paths
  script:
    - &lib |
      function publish() {
        test -f "${MANIFEST:?cannot be empty}" || fail 2 "File does not exist - $MANIFEST" || return $?
        REF=${CI_COMMIT_BEFORE_SHA/0000000000000000000000000000000000000000/origin/develop}
        MODIFIED="$(git diff --name-only "$REF..HEAD" -- "$MANIFEST")"
        test ! "$MODIFIED" && echo "Skipped unmodified $MANIFEST" || publish_modified
      }
      function publish_modified() {
        echo "Checking modified ${MANIFEST:?cannot be empty}"
        VER=$(cargo pkgid --manifest-path "$MANIFEST" | cut -d '#' -f2- | tr -d '\n')
        CHECK="Skipping $MANIFEST VER=$VER on REF=$CI_COMMIT_REF_NAME. Versions on master must be stable while others must be pre-release labeled."
        case "$CI_COMMIT_REF_NAME" in
          master)
            if echo "$VER" | egrep '^[0-9.]+$'; then publish_checked; else fail 3 "$CHECK"; fi
            ;;
          develop)
            if echo "$VER" | egrep '^[0-9.]+-.+$'; then publish_checked; else fail 3 "$CHECK"; fi
            ;;
          *)
            echo "Will only publish stable from master or pre-release from develop"
            ;;
        esac
      }
      function publish_checked() {
        echo "Publishing ${MANIFEST:?cannot be empty}"
        cargo publish --manifest-path "$MANIFEST" --token "$CRATES_KEY" && sleep 10
      }
      function fail() {
        err=$1
        shift
        echo "$*"
        return $err
      }
    - MANIFEST=samotop-model/Cargo.toml publish
    - MANIFEST=samotop-core/Cargo.toml publish
    - MANIFEST=samotop-parser/Cargo.toml publish
    - MANIFEST=samotop/Cargo.toml publish
    - MANIFEST=samotop-server/Cargo.toml publish

publish-docker:
  stage: release
  image: "docker:git"
  services:
    - docker:dind
  only:
    - develop
    - master
  script:
    - cp -ra samotop-server/docker target/
    # Copy either debug or release binary
    - cp target/samotop target/docker/samotop
    - cd target/docker/
    - docker build -t samotop .
    - cd ../../
    - docker run -t --rm samotop --help
    # extract version
    - VER="$(docker run -t --rm samotop --version | cut -d ' ' -f2- | tr -d '\r\n')"
    - echo "version=$VER"
    # local tagging
    - TAG_CURRENT="brightopen/samotop:$VER"
    - TAG_MINOR="brightopen/samotop:${VER%.*}"
    - TAG_MAJOR="brightopen/samotop:${VER%%.*}"
    - TAG_LATEST="brightopen/samotop:latest"
    - docker tag samotop "$TAG_CURRENT"
    - docker tag samotop "$TAG_MINOR"
    - docker tag samotop "$TAG_MAJOR"
    - docker tag samotop "$TAG_LATEST"
    # remote docker hub push
    - docker login -u "$DOCKER_USR" -p "$DOCKER_PWD"
    - *lib
    - | # override the publish fn
      function publish_checked() {
        # push current version
        case "$CI_COMMIT_REF_NAME" in master|develop) docker push "$TAG_CURRENT" ;; *) echo Will only push current from master or develop branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
        # push stable version as latest
        case "$CI_COMMIT_REF_NAME" in master) docker push "$TAG_MINOR" && docker push "$TAG_MAJOR" && docker push "$TAG_LATEST" ;; *) echo Will only push latest from master branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
      }
    - MANIFEST=samotop-server/Cargo.toml publish
