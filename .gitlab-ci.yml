image: "rust:latest"

stages:
  - build
  - release

variables:
  CARGO_HOME: ".cargo"

build:
  stage: build
  except:
    - master
  cache:
    paths: &cache-paths
      - target/
      - $CARGO_HOME
  artifacts:
    paths:
      - target/samotop
      - Cargo.lock
  before_script:
    - rustc --version
    - cargo --version
  script:
    # if it is a stable version, do a release build, otherwise debug build
    - test "$CI_COMMIT_REF_NAME" == "master" || cargo build
    - test "$CI_COMMIT_REF_NAME" != "master" || cargo build --release
    # test in release mode for stable builds otherwise in debug
    - test "$CI_COMMIT_REF_NAME" == "master" || cargo test --all
    - test "$CI_COMMIT_REF_NAME" != "master" || cargo test --all --release
    # copy either release or debug server as an artifact
    - test "$CI_COMMIT_REF_NAME" == "master" || cp -fa target/debug/samotop-server target/samotop
    - test "$CI_COMMIT_REF_NAME" != "master" || cp -fa target/release/samotop-server target/samotop

test-nightly:
  stage: release
  allow_failure: true
  cache:
    key: nightly
    paths: *cache-paths
  script:
    - rustup default nightly
    - cargo test --all --verbose

.publish-crate:
  stage: release
  cache:
    policy: pull
    paths: *cache-paths
  script:
    # the job expects parameters
    - echo "MANIFEST=${MANIFEST? missing parameter }"
    # extract manifest version
    - VER=$(cargo pkgid --manifest-path "$MANIFEST" | cut -d '#' -f2- | tr -d '\n')
    # versions published from master must be stable.
    # versions published from non-master must have a label.
    - &testver |
      test "$CI_COMMIT_REF_NAME" == "master" -a -z "${VER##+([0-9.])}" \
        -o \( "$CI_COMMIT_REF_NAME" != "master" -a -n "${VER##+([0-9.])}" \) || \
        ${WRONG_VERSION? Versions on master must be stable while others must be pre-release labeled. VER=$VER REF=$CI_GIT_REF }
    - case "$CI_COMMIT_REF_NAME" in master|develop) cargo publish --manifest-path "$MANIFEST" --token "$CRATES_KEY" ;; *) echo Will only publish from master or develop branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac

publish-samotop:
  extends: .publish-crate
  variables:
    MANIFEST: samotop/Cargo.toml

publish-samotop-server:
  extends: .publish-crate
  # delay start so that hopefully, samotop crate is already published, while not wasting too much time
  when: delayed
  start_in: 2 minutes
  variables:
    MANIFEST: samotop-server/Cargo.toml

publish-docker:
  stage: release
  image: "docker:git"
  services:
    - docker:dind
  script:
    - cp -ra samotop-server/docker target/
    # Copy either debug or release binary
    - cp target/samotop target/docker/samotop
    - cd target/docker/
    - docker build -t samotop .
    - docker run -t --rm samotop --help
    # extract version
    - VER="$(docker run -t --rm samotop --version | cut -d ' ' -f2- | tr -d '\r\n')"
    - echo "version=$VER"
    # local tagging
    - TAG_CURRENT="brightopen/samotop:$VER"
    - TAG_MINOR="brightopen/samotop:${VER%.*}"
    - TAG_MAJOR="brightopen/samotop:${VER%%.*}"
    - TAG_LATEST="brightopen/samotop:latest"
    - docker tag samotop "$TAG_CURRENT"
    - docker tag samotop "$TAG_LATEST"
    # remote docker hub push
    - docker login -u "$DOCKER_USR" -p "$DOCKER_PWD"
    # test branch and label match
    - *testver
    # push current version
    - case "$CI_COMMIT_REF_NAME" in master|develop) docker push "$TAG_CURRENT" ;; *) echo Will only push current from master or develop branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
    # push stable version as latest
    - case "$CI_COMMIT_REF_NAME" in master) docker push "$TAG_MINOR" && docker push "$TAG_MAJOR" && docker push "$TAG_LATEST" ;; *) echo Will only push latest from master branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac